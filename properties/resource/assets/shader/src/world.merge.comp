#version 460
#pragma shader_stage(compute)

#include "lib/blend"

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0) uniform sampler2D input_baseColor;
layout (binding = 1) uniform sampler2D input_lightColor;
layout (binding = 2) uniform sampler2D input_lightColor_blurred;
layout (binding = 3) uniform sampler2D input_ssao;

layout (binding = 4, rgba32f) writeonly uniform image2D outputImage;

const float intensity_blo = 1.125f;
const float intensity_ori = 0.95f;
const float lightScl = 1.5f;

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(pos) + vec2(0.5f, 0.5f)) / vec2(imageSize(outputImage));


    vec4 baseColor = texelFetch(input_baseColor, pos, 0);
    vec4 original = texelFetch(input_lightColor, pos, 0) * intensity_ori;
    vec4 bloom = texture(input_lightColor_blurred, uv) * intensity_blo;
    vec4 ssao = texture(input_ssao, uv);

    original = original * (vec4(1.0) - bloom);
    vec4 combined = original + bloom;

    float mx = min(max(combined.r, max(combined.g, combined.b)), 1.0);

    vec4 lightColor = vec4(combined.rgb / max(mx, 0.0001), mx);

    float lightness = lightColor.a * lightScl;
    ssao.a -= lightness;

    imageStore(outputImage, pos, alphaBlend(lightColor, vec4(baseColor.rgb * mix(vec3(1.f), ssao.rgb, ssao.a), baseColor.a)));
}